service: message-broker
frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs18.x
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}
  environment:
    EVENT_BUS_NAME: ${self:service}-bus-${sls:stage}
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - events:PutEvents
            - events:CreateEventBus
          Resource: "*"

functions:
  # Função que recebe o evento via HTTP
  httpReceiver:
    handler: src/functions/httpReceiver.handler
    events:
      - http:
          path: /events
          method: post
          cors: true

  # processEventOne:
  #   handler: src/functions/httpReceiverprocessEventOne.handler  
  #   events:
  #     - eventBridge:
  #         eventBus: ${self:provider.environment.EVENT_BUS_NAME}
  #         pattern:
  #           source: ["message.broker"]
  #           detail-type: ["EventOne"]

  # processEventTwo:
  #   handler: src/functions/processEventTwo.handler
  #   events:
  #     - eventBridge:
  #         eventBus: ${self:provider.environment.EVENT_BUS_NAME}
  #         pattern:
  #           source: ["message.broker"]
  #           detail-type: ["EventTwo"]

resources:
  Resources:
    EventBus:
      Type: AWS::Events::EventBus
      Properties:
        Name: ${self:provider.environment.EVENT_BUS_NAME}

plugins:
  - serverless-plugin-typescript
  - serverless-offline
